Networking

=== misc notes 11/27 ===
	- CLIENT
		- we don't need to send the board along with every gamestate from server, just the game init
		- why are there 2 socket control centers, one in /socket.js, 1 in /socket/?

=== Socket Stuff ===
	== SERVER ==
		const app = express()
		const io = require('socket.io')(app.listen(...))
		io.on('connection', (socket) => {
			socket.on('label', (payload) => {
				socket.broadcast.emit('label', payload)
			})
		})

=== Client ===
	1. Attempt to connect to server (async/await)
	2. once Connected promise resolves:
		- socket.emit(that you're playing)
		- startCapturingInput()
		- startRendering()

	- Some actions client takes:
		- fetch current gamestate
		- draw background
		- draw all players' resources
		- start rendering (set interval)
		- stop rendering (clear interval)

	- Handling client input:
		- mouse handling of move/down/up
			- via startCapturingInput() (add event listener) & stopCapturingInput() (remove event listener)
			- sends new info to server
	- Handling State
		- Gamestate object:
			- server timestamp at which update was created
			- "me" {}
			- other players [{}, {}, {}]
			- leaderboard stuff
		- getCurrentState
			- !!! THIS IS AN ARRAY OF SERVER UPDATES
		- processGameUpdate({ gameUpdateObject })
		- TO CONSIDER:
			- syncing server and client rendering
			- buffering, linear interpolation

=== server ===